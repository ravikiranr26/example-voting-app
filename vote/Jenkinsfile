pipeline {

    agent none

    stages {
        stage('build') {
            agent {
                docker {
                    image 'python:2.7.16-slim'
                    args '--user root'
                }
            }
            when {
                changeset '**/vote/**'
            }
            steps {
                echo 'Compiling Vote App'
                dir('vote') {
                    sh 'pip install -r requirements.txt'
                }
            }
        }

        stage('test') {
            agent {
                docker {
                    image 'python:2.7.16-slim'
                    args '--user root'
                }
            }
            when {
                changeset '**/vote/**'
            }
            steps {
                echo 'Running the unit tests for Vote App'
                dir('vote') {
                    sh 'nosetests -v'
                }
            }
        }

        stage('docker-package') {
            agent any
            when {
                branch 'master'
                changeset "**/vote/**"
            }
            steps {
                echo 'Packaging the vote app with docker.'
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                        def workerImage = docker.build("rknmit/vote:v${env.BUILD_ID}", "./vote")
                        workerImage.push()
                        workerImage.push("${env.BRANCH_NAME}")
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'pipeline for the vote is completed'
        }
        success {
            slackSend (channel: "instavote-cd", message: "Build Success: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")

        }

        failure {
            slackSend (channel: "instavote-cd", message: "Build Failed: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
        }
    }
}